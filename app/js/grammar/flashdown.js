fdownParser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "headerElem": parse_headerElem,
        "contentElements": parse_contentElements,
        "contentElement": parse_contentElement,
        "itemStart": parse_itemStart,
        "questionItemStart": parse_questionItemStart,
        "answerItemStart": parse_answerItemStart,
        "commentItemStart": parse_commentItemStart,
        "questionItem": parse_questionItem,
        "answerItem": parse_answerItem,
        "commentItem": parse_commentItem,
        "referenceItem": parse_referenceItem,
        "paragraphElem": parse_paragraphElem,
        "paragraphSpan": parse_paragraphSpan,
        "italicSpan": parse_italicSpan,
        "asteriskSpan": parse_asteriskSpan,
        "asteriskSpanSpan": parse_asteriskSpanSpan,
        "underscoreSpan": parse_underscoreSpan,
        "underscoreSpanSpan": parse_underscoreSpanSpan,
        "doubleAsteriskSpan": parse_doubleAsteriskSpan,
        "doubleAsteriskSpanSpan": parse_doubleAsteriskSpanSpan,
        "linkSpan": parse_linkSpan,
        "inlineLinkSpan": parse_inlineLinkSpan,
        "refLinkSpan": parse_refLinkSpan,
        "autoLinkSpan": parse_autoLinkSpan,
        "linkSpanSpan": parse_linkSpanSpan,
        "titleQuoteSpan": parse_titleQuoteSpan,
        "titleSpan": parse_titleSpan,
        "titleSpanNewLineChar": parse_titleSpanNewLineChar,
        "imgSpan": parse_imgSpan,
        "inlineImgSpan": parse_inlineImgSpan,
        "refImgSpan": parse_refImgSpan,
        "imgSpanSpan": parse_imgSpanSpan,
        "paragraphBreak": parse_paragraphBreak,
        "spacedLiteral": parse_spacedLiteral,
        "escapedLiteral": parse_escapedLiteral,
        "hardWrapChar": parse_hardWrapChar,
        "lineBreakSpan": parse_lineBreakSpan,
        "n": parse_n,
        "whitespace": parse_whitespace,
        "w": parse_w,
        "space": parse_space,
        "s": parse_s,
        "FailMatch": parse_FailMatch
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_headerElem();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_contentElements();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, header, content) {
        			return {
        				header: header,
        				content: content
        			};
        		})(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_headerElem() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (/^(?!)/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[]");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        			return {
        				author: '',
        				title: '',
        				date: '',
        				tags: [],
        				summary: ''
        			};
        		})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_contentElements() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_contentElement();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_contentElement();
        }
        if (result0 !== null) {
          result0 = (function(offset, elem) { return elem; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_contentElement() {
        var result0;
        
        result0 = parse_questionItem();
        if (result0 === null) {
          result0 = parse_answerItem();
          if (result0 === null) {
            result0 = parse_commentItem();
            if (result0 === null) {
              result0 = parse_referenceItem();
            }
          }
        }
        return result0;
      }
      
      function parse_itemStart() {
        var result0;
        
        result0 = parse_questionItemStart();
        if (result0 === null) {
          result0 = parse_answerItemStart();
          if (result0 === null) {
            result0 = parse_commentItemStart();
            if (result0 === null) {
              result0 = parse_referenceItem();
            }
          }
        }
        return result0;
      }
      
      function parse_questionItemStart() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 42) {
            result1 = "*";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_answerItemStart() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 45) {
            result1 = "-";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_commentItemStart() {
        var result0, result1, result2;
        var pos0;
        
        pos0 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 43) {
            result1 = "+";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"+\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_questionItem() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_questionItemStart();
        if (result0 !== null) {
          result1 = parse_space();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_paragraphElem();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_paragraphElem();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p) {
        			return {
        				type: 'question',
        				paragraphs: p
        			};
        		})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_answerItem() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_answerItemStart();
        if (result0 !== null) {
          result1 = parse_space();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_paragraphElem();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_paragraphElem();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, p) {
        			return {
        				type: 'answer',
        				paragraphs: p
        			};
        		})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_commentItem() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3, pos4, pos5;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_commentItemStart();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          pos4 = pos;
          reportFailures++;
          pos5 = pos;
          result2 = parse_n();
          if (result2 !== null) {
            result3 = parse_itemStart();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos5;
            }
          } else {
            result2 = null;
            pos = pos5;
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos4;
          }
          if (result2 !== null) {
            if (input.length > pos) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, s) { return s; })(pos2, result2[1]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            pos4 = pos;
            reportFailures++;
            pos5 = pos;
            result2 = parse_n();
            if (result2 !== null) {
              result3 = parse_itemStart();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos5;
              }
            } else {
              result2 = null;
              pos = pos5;
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos4;
            }
            if (result2 !== null) {
              if (input.length > pos) {
                result3 = input.charAt(pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, s) { return s; })(pos2, result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        			return {
        				type: 'comment'
        			};
        		})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_referenceItem() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_whitespace();
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 91) {
            result1 = "[";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            if (/^[^\n\r\]]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\n\\r\\]]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[^\n\r\]]/.test(input.charAt(pos))) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\n\\r\\]]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.substr(pos, 2) === "]:") {
                result3 = "]:";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"]:\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_space();
                if (result4 !== null) {
                  pos2 = pos;
                  if (/^[^\n\r \t]/.test(input.charAt(pos))) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\n\\r \\t]");
                    }
                  }
                  if (result6 !== null) {
                    result5 = [];
                    while (result6 !== null) {
                      result5.push(result6);
                      if (/^[^\n\r \t]/.test(input.charAt(pos))) {
                        result6 = input.charAt(pos);
                        pos++;
                      } else {
                        result6 = null;
                        if (reportFailures === 0) {
                          matchFailed("[^\\n\\r \\t]");
                        }
                      }
                    }
                  } else {
                    result5 = null;
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, u) { return u.join(''); })(pos2, result5);
                  }
                  if (result5 === null) {
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    pos2 = pos;
                    pos3 = pos;
                    result7 = parse_s();
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_s();
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_n();
                      result7 = result7 !== null ? result7 : "";
                      if (result7 !== null) {
                        result8 = parse_space();
                        if (result8 !== null) {
                          result9 = parse_titleSpan();
                          if (result9 !== null) {
                            result6 = [result6, result7, result8, result9];
                          } else {
                            result6 = null;
                            pos = pos3;
                          }
                        } else {
                          result6 = null;
                          pos = pos3;
                        }
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    if (result6 !== null) {
                      result6 = (function(offset, t) { return t; })(pos2, result6[3]);
                    }
                    if (result6 === null) {
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_space();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, id, url, title) {
        			return {
        				type: 'ref',
        				id: id.join(''),
        				url: url,
        				title: title
        			};
        		})(pos0, result0[2], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_paragraphElem() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        pos3 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_itemStart();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos3;
          }
        } else {
          result0 = null;
          pos = pos3;
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 !== null) {
          result1 = parse_whitespace();
          if (result1 !== null) {
            result3 = parse_paragraphSpan();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_paragraphSpan();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans) {
        			return {
        				spans: condenseSpans(spans)
        			};
        		})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_paragraphSpan() {
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        result0 = parse_italicSpan();
        if (result0 === null) {
          result0 = parse_doubleAsteriskSpan();
          if (result0 === null) {
            result0 = parse_linkSpan();
            if (result0 === null) {
              result0 = parse_imgSpan();
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                pos2 = pos;
                reportFailures++;
                result0 = parse_paragraphBreak();
                reportFailures--;
                if (result0 === null) {
                  result0 = "";
                } else {
                  result0 = null;
                  pos = pos2;
                }
                if (result0 !== null) {
                  pos2 = pos;
                  reportFailures++;
                  pos3 = pos;
                  result1 = parse_n();
                  if (result1 !== null) {
                    result2 = parse_itemStart();
                    if (result2 !== null) {
                      result1 = [result1, result2];
                    } else {
                      result1 = null;
                      pos = pos3;
                    }
                  } else {
                    result1 = null;
                    pos = pos3;
                  }
                  reportFailures--;
                  if (result1 === null) {
                    result1 = "";
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                  if (result1 !== null) {
                    result2 = parse_lineBreakSpan();
                    if (result2 === null) {
                      pos2 = pos;
                      result2 = parse_hardWrapChar();
                      if (result2 === null) {
                        if (input.length > pos) {
                          result2 = input.charAt(pos);
                          pos++;
                        } else {
                          result2 = null;
                          if (reportFailures === 0) {
                            matchFailed("any character");
                          }
                        }
                      }
                      if (result2 !== null) {
                        result2 = (function(offset, s) { return s; })(pos2, result2);
                      }
                      if (result2 === null) {
                        pos = pos2;
                      }
                    }
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, s) { return s; })(pos0, result0[2]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_italicSpan() {
        var result0;
        
        result0 = parse_asteriskSpan();
        if (result0 === null) {
          result0 = parse_underscoreSpan();
        }
        return result0;
      }
      
      function parse_asteriskSpan() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('em'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 42) {
            result1 = "*";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"*\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 42) {
              result2 = "*";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"*\"");
              }
            }
            if (result2 === null) {
              result2 = parse_w();
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result4 = parse_asteriskSpanSpan();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_asteriskSpanSpan();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 42) {
                  result4 = "*";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*\"");
                  }
                }
                if (result4 !== null) {
                  result5 = (function(offset, spans) {
                  			var lastSpan = spans[spans.length - 1];
                  			if (typeof lastSpan !== 'string') {
                  				return true;
                  			}
                  			return !(/\s/.test(lastSpan[lastSpan.length - 1]));
                  		})(pos, result3) ? "" : null;
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans) {
        			popStack('em');
        			return {
        				type: 'em',
        				spans: condenseSpans(spans)
        			};
        		})(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('em'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_asteriskSpanSpan() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        result0 = parse_linkSpan();
        if (result0 === null) {
          result0 = parse_lineBreakSpan();
          if (result0 === null) {
            result0 = parse_escapedLiteral();
            if (result0 === null) {
              result0 = parse_hardWrapChar();
              if (result0 === null) {
                result0 = parse_doubleAsteriskSpan();
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  pos2 = pos;
                  reportFailures++;
                  if (/^[*]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[*]");
                    }
                  }
                  reportFailures--;
                  if (result0 === null) {
                    result0 = "";
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                  if (result0 !== null) {
                    if (input.length > pos) {
                      result1 = input.charAt(pos);
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, s) { return s; })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_underscoreSpan() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('em'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 95) {
            result1 = "_";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 95) {
              result2 = "_";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"_\"");
              }
            }
            if (result2 === null) {
              result2 = parse_w();
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result4 = parse_underscoreSpanSpan();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_underscoreSpanSpan();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 95) {
                  result4 = "_";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"_\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans) {
        			popStack('em');
        			return {
        				type: 'em',
        				spans: condenseSpans(spans)
        			};
        		})(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('em'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_underscoreSpanSpan() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        result0 = parse_linkSpan();
        if (result0 === null) {
          result0 = parse_lineBreakSpan();
          if (result0 === null) {
            result0 = parse_escapedLiteral();
            if (result0 === null) {
              result0 = parse_hardWrapChar();
              if (result0 === null) {
                result0 = parse_doubleAsteriskSpan();
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  pos2 = pos;
                  reportFailures++;
                  if (/^[_]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[_]");
                    }
                  }
                  reportFailures--;
                  if (result0 === null) {
                    result0 = "";
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                  if (result0 !== null) {
                    if (input.length > pos) {
                      result1 = input.charAt(pos);
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, s) { return s; })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_doubleAsteriskSpan() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('strong'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos, 2) === "**") {
            result1 = "**";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"**\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "**") {
              result2 = "**";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"**\"");
              }
            }
            if (result2 === null) {
              result2 = parse_w();
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = pos2;
            }
            if (result2 !== null) {
              result4 = parse_doubleAsteriskSpanSpan();
              if (result4 !== null) {
                result3 = [];
                while (result4 !== null) {
                  result3.push(result4);
                  result4 = parse_doubleAsteriskSpanSpan();
                }
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                if (input.substr(pos, 2) === "**") {
                  result4 = "**";
                  pos += 2;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"**\"");
                  }
                }
                if (result4 !== null) {
                  result5 = (function(offset, spans) {
                  			var lastSpan = spans[spans.length - 1];
                  			if (typeof lastSpan !== 'string') {
                  				return true;
                  			}
                  			return !(/\s/.test(lastSpan[lastSpan.length - 1]));
                  		})(pos, result3) ? "" : null;
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans) {
        			popStack('strong');
        			return {
        				type: 'strong',
        				spans: condenseSpans(spans)
        			};
        		})(pos0, result0[3]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('strong'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_doubleAsteriskSpanSpan() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        result0 = parse_linkSpan();
        if (result0 === null) {
          result0 = parse_lineBreakSpan();
          if (result0 === null) {
            result0 = parse_escapedLiteral();
            if (result0 === null) {
              result0 = parse_hardWrapChar();
              if (result0 === null) {
                result0 = parse_italicSpan();
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  pos2 = pos;
                  reportFailures++;
                  if (/^[*]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[*]");
                    }
                  }
                  reportFailures--;
                  if (result0 === null) {
                    result0 = "";
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                  if (result0 !== null) {
                    if (input.length > pos) {
                      result1 = input.charAt(pos);
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, s) { return s; })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_linkSpan() {
        var result0;
        
        result0 = parse_inlineLinkSpan();
        if (result0 === null) {
          result0 = parse_refLinkSpan();
          if (result0 === null) {
            result0 = parse_autoLinkSpan();
          }
        }
        return result0;
      }
      
      function parse_inlineLinkSpan() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('a'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 91) {
            result1 = "[";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_linkSpanSpan();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_linkSpanSpan();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.substr(pos, 2) === "](") {
                result3 = "](";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"](\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_space();
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = [];
                  if (/^[^)\r\n \t]/.test(input.charAt(pos))) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^)\\r\\n \\t]");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (/^[^)\r\n \t]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[^)\\r\\n \\t]");
                      }
                    }
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, u) { return u.join(''); })(pos2, result5);
                  }
                  if (result5 === null) {
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    pos2 = pos;
                    pos3 = pos;
                    result7 = parse_s();
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_s();
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_titleQuoteSpan();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    if (result6 !== null) {
                      result6 = (function(offset, t) { return t; })(pos2, result6[1]);
                    }
                    if (result6 === null) {
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_space();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                          result8 = ")";
                          pos++;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans, url, title) {
        			popStack('a');
        			return {
        				type: 'a',
        				url: url,
        				title: title,
        				spans: condenseSpans(spans)
        			}
        		})(pos0, result0[2], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('a'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_refLinkSpan() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('a'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 91) {
            result1 = "[";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_linkSpanSpan();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_linkSpanSpan();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.substr(pos, 2) === "][") {
                result3 = "][";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"][\"");
                }
              }
              if (result3 === null) {
                if (input.substr(pos, 3) === "] [") {
                  result3 = "] [";
                  pos += 3;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"] [\"");
                  }
                }
              }
              if (result3 !== null) {
                pos2 = pos;
                result4 = [];
                if (/^[^\r\n\]]/.test(input.charAt(pos))) {
                  result5 = input.charAt(pos);
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\r\\n\\]]");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (/^[^\r\n\]]/.test(input.charAt(pos))) {
                    result5 = input.charAt(pos);
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\r\\n\\]]");
                    }
                  }
                }
                if (result4 !== null) {
                  result4 = (function(offset, u) { return u.join(''); })(pos2, result4);
                }
                if (result4 === null) {
                  pos = pos2;
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    result5 = "]";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans, ref) {
        			popStack('a');
        			return {
        				type: 'a',
        				ref: ref,
        				spans: condenseSpans(spans)
        			}
        		})(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('a'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_autoLinkSpan() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('a'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 60) {
            result1 = "<";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<\"");
            }
          }
          if (result1 !== null) {
            pos2 = pos;
            if (/^[^\r\n>]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\r\\n>]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[^\r\n>]/.test(input.charAt(pos))) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\r\\n>]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result2 = (function(offset, u) { return u.join(''); })(pos2, result2);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 62) {
                result3 = ">";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, url) {
        			popStack('a');
        			return {
        				type: 'a',
        				url: url,
        				title: url,
        				spans: url
        			};
        		})(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('a'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_linkSpanSpan() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        result0 = parse_italicSpan();
        if (result0 === null) {
          result0 = parse_doubleAsteriskSpan();
          if (result0 === null) {
            result0 = parse_lineBreakSpan();
            if (result0 === null) {
              result0 = parse_escapedLiteral();
              if (result0 === null) {
                result0 = parse_hardWrapChar();
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  pos2 = pos;
                  reportFailures++;
                  if (/^[\]]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\]]");
                    }
                  }
                  reportFailures--;
                  if (result0 === null) {
                    result0 = "";
                  } else {
                    result0 = null;
                    pos = pos2;
                  }
                  if (result0 !== null) {
                    if (input.length > pos) {
                      result1 = input.charAt(pos);
                      pos++;
                    } else {
                      result1 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, s) { return s; })(pos0, result0[1]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_titleQuoteSpan() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          if (input.substr(pos, 2) === "\\\"") {
            result2 = "\\\"";
            pos += 2;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\\\"\"");
            }
          }
          if (result2 !== null) {
            result2 = (function(offset) { return '"'; })(pos2);
          }
          if (result2 === null) {
            pos = pos2;
          }
          if (result2 === null) {
            result2 = parse_titleSpanNewLineChar();
            if (result2 === null) {
              if (/^[^"]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^\"]");
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            if (input.substr(pos, 2) === "\\\"") {
              result2 = "\\\"";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset) { return '"'; })(pos2);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              result2 = parse_titleSpanNewLineChar();
              if (result2 === null) {
                if (/^[^"]/.test(input.charAt(pos))) {
                  result2 = input.charAt(pos);
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\"]");
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, t) { return t.join(''); })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_titleSpan() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        result0 = parse_titleQuoteSpan();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 39) {
            result0 = "'";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            pos2 = pos;
            if (input.substr(pos, 2) === "\\'") {
              result2 = "\\'";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\'\"");
              }
            }
            if (result2 !== null) {
              result2 = (function(offset) { return '\''; })(pos2);
            }
            if (result2 === null) {
              pos = pos2;
            }
            if (result2 === null) {
              result2 = parse_titleSpanNewLineChar();
              if (result2 === null) {
                if (/^[^']/.test(input.charAt(pos))) {
                  result2 = input.charAt(pos);
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^']");
                  }
                }
              }
            }
            while (result2 !== null) {
              result1.push(result2);
              pos2 = pos;
              if (input.substr(pos, 2) === "\\'") {
                result2 = "\\'";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\'\"");
                }
              }
              if (result2 !== null) {
                result2 = (function(offset) { return '\''; })(pos2);
              }
              if (result2 === null) {
                pos = pos2;
              }
              if (result2 === null) {
                result2 = parse_titleSpanNewLineChar();
                if (result2 === null) {
                  if (/^[^']/.test(input.charAt(pos))) {
                    result2 = input.charAt(pos);
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^']");
                    }
                  }
                }
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos) === 39) {
                result2 = "'";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, t) { return t.join(''); })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            if (input.charCodeAt(pos) === 40) {
              result0 = "(";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              if (input.substr(pos, 2) === "\\)") {
                result2 = "\\)";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\)\"");
                }
              }
              if (result2 !== null) {
                result2 = (function(offset) { return ')'; })(pos2);
              }
              if (result2 === null) {
                pos = pos2;
              }
              if (result2 === null) {
                result2 = parse_titleSpanNewLineChar();
                if (result2 === null) {
                  if (/^[^)]/.test(input.charAt(pos))) {
                    result2 = input.charAt(pos);
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^)]");
                    }
                  }
                }
              }
              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                if (input.substr(pos, 2) === "\\)") {
                  result2 = "\\)";
                  pos += 2;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\)\"");
                  }
                }
                if (result2 !== null) {
                  result2 = (function(offset) { return ')'; })(pos2);
                }
                if (result2 === null) {
                  pos = pos2;
                }
                if (result2 === null) {
                  result2 = parse_titleSpanNewLineChar();
                  if (result2 === null) {
                    if (/^[^)]/.test(input.charAt(pos))) {
                      result2 = input.charAt(pos);
                      pos++;
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("[^)]");
                      }
                    }
                  }
                }
              }
              if (result1 !== null) {
                if (input.charCodeAt(pos) === 41) {
                  result2 = ")";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, t) { return t.join(''); })(pos0, result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_titleSpanNewLineChar() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        result0 = parse_paragraphBreak();
        if (result0 === null) {
          pos1 = pos;
          if (input.charCodeAt(pos) === 32) {
            result0 = " ";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result0 !== null) {
            result2 = parse_s();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_s();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_n();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 === null) {
            pos1 = pos;
            if (input.charCodeAt(pos) === 9) {
              result0 = "\t";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\t\"");
              }
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_s();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_s();
              }
              if (result1 !== null) {
                result2 = parse_n();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return '\n'; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          result0 = parse_hardWrapChar();
        }
        return result0;
      }
      
      function parse_imgSpan() {
        var result0;
        
        result0 = parse_inlineImgSpan();
        if (result0 === null) {
          result0 = parse_refImgSpan();
        }
        return result0;
      }
      
      function parse_inlineImgSpan() {
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('img'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos, 2) === "![") {
            result1 = "![";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"![\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_imgSpanSpan();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_imgSpanSpan();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.substr(pos, 2) === "](") {
                result3 = "](";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"](\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_space();
                if (result4 !== null) {
                  pos2 = pos;
                  result5 = [];
                  if (/^[^)\r\n \t]/.test(input.charAt(pos))) {
                    result6 = input.charAt(pos);
                    pos++;
                  } else {
                    result6 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^)\\r\\n \\t]");
                    }
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    if (/^[^)\r\n \t]/.test(input.charAt(pos))) {
                      result6 = input.charAt(pos);
                      pos++;
                    } else {
                      result6 = null;
                      if (reportFailures === 0) {
                        matchFailed("[^)\\r\\n \\t]");
                      }
                    }
                  }
                  if (result5 !== null) {
                    result5 = (function(offset, u) { return u.join(''); })(pos2, result5);
                  }
                  if (result5 === null) {
                    pos = pos2;
                  }
                  if (result5 !== null) {
                    pos2 = pos;
                    pos3 = pos;
                    result7 = parse_s();
                    if (result7 !== null) {
                      result6 = [];
                      while (result7 !== null) {
                        result6.push(result7);
                        result7 = parse_s();
                      }
                    } else {
                      result6 = null;
                    }
                    if (result6 !== null) {
                      result7 = parse_titleQuoteSpan();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = pos3;
                      }
                    } else {
                      result6 = null;
                      pos = pos3;
                    }
                    if (result6 !== null) {
                      result6 = (function(offset, t) { return t; })(pos2, result6[1]);
                    }
                    if (result6 === null) {
                      pos = pos2;
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_space();
                      if (result7 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                          result8 = ")";
                          pos++;
                        } else {
                          result8 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result8 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans, url, title) {
        			popStack('img');
        			return {
        				type: 'img',
        				url: url,
        				title: title,
        				spans: spans.join('')
        			}
        		})(pos0, result0[2], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('img'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_refImgSpan() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = (function(offset) { return tryPushSpanStack('img'); })(pos) ? "" : null;
        if (result0 !== null) {
          if (input.substr(pos, 2) === "![") {
            result1 = "![";
            pos += 2;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"![\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_imgSpanSpan();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_imgSpanSpan();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              if (input.substr(pos, 2) === "][") {
                result3 = "][";
                pos += 2;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"][\"");
                }
              }
              if (result3 !== null) {
                pos2 = pos;
                result4 = [];
                if (/^[^\r\n\]]/.test(input.charAt(pos))) {
                  result5 = input.charAt(pos);
                  pos++;
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("[^\\r\\n\\]]");
                  }
                }
                while (result5 !== null) {
                  result4.push(result5);
                  if (/^[^\r\n\]]/.test(input.charAt(pos))) {
                    result5 = input.charAt(pos);
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("[^\\r\\n\\]]");
                    }
                  }
                }
                if (result4 !== null) {
                  result4 = (function(offset, u) { return u.join(''); })(pos2, result4);
                }
                if (result4 === null) {
                  pos = pos2;
                }
                if (result4 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    result5 = "]";
                    pos++;
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, spans, ref) {
        			popStack('img');
        			return {
        				type: 'img',
        				ref: ref,
        				spans: spans.join('')
        			}
        		})(pos0, result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = (function(offset) { popStack('img'); })(pos) ? "" : null;
          if (result0 !== null) {
            result1 = parse_FailMatch();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_imgSpanSpan() {
        var result0, result1;
        var pos0, pos1, pos2;
        
        result0 = parse_hardWrapChar();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          pos2 = pos;
          reportFailures++;
          if (/^[\]]/.test(input.charAt(pos))) {
            result0 = input.charAt(pos);
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[\\]]");
            }
          }
          reportFailures--;
          if (result0 === null) {
            result0 = "";
          } else {
            result0 = null;
            pos = pos2;
          }
          if (result0 !== null) {
            if (input.length > pos) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, s) { return s; })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_paragraphBreak() {
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = pos;
        result0 = parse_space();
        if (result0 !== null) {
          result1 = parse_n();
          if (result1 !== null) {
            result2 = parse_space();
            if (result2 !== null) {
              result3 = parse_n();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
        return result0;
      }
      
      function parse_spacedLiteral() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === " * ") {
          result0 = " * ";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" * \"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ' * '; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 3) === " _ ") {
            result0 = " _ ";
            pos += 3;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\" _ \"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) { return ' _ '; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_escapedLiteral() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 2) === "\\*") {
          result0 = "\\*";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\*\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return '*'; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          if (input.substr(pos, 2) === "\\_") {
            result0 = "\\_";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\_\"");
            }
          }
          if (result0 !== null) {
            result0 = (function(offset) { return '_'; })(pos0);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 2) === "\\]") {
              result0 = "\\]";
              pos += 2;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\]\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) { return '['; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              if (input.substr(pos, 2) === "\\\\") {
                result0 = "\\\\";
                pos += 2;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\\\\\"");
                }
              }
              if (result0 !== null) {
                result0 = (function(offset) { return '\\'; })(pos0);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_hardWrapChar() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_n();
        if (result0 !== null) {
          result1 = parse_space();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return ' '; })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_lineBreakSpan() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        pos2 = pos;
        if (input.charCodeAt(pos) === 32) {
          result0 = " ";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result0 !== null) {
          result2 = parse_s();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_s();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_n();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        } else {
          result0 = null;
          pos = pos2;
        }
        if (result0 === null) {
          pos2 = pos;
          if (input.charCodeAt(pos) === 9) {
            result0 = "\t";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\t\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_s();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_s();
            }
            if (result1 !== null) {
              result2 = parse_n();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }
          } else {
            result0 = null;
            pos = pos2;
          }
        }
        if (result0 !== null) {
          result1 = parse_space();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset) {
        			return {
        				type: "br"
        			};
        		})(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_n() {
        var result0;
        
        if (/^[\r\n]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\r\\n]");
          }
        }
        return result0;
      }
      
      function parse_whitespace() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_w();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_w();
        }
        return result0;
      }
      
      function parse_w() {
        var result0;
        
        result0 = parse_s();
        if (result0 === null) {
          result0 = parse_n();
        }
        return result0;
      }
      
      function parse_space() {
        var result0, result1;
        
        result0 = [];
        result1 = parse_s();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_s();
        }
        return result0;
      }
      
      function parse_s() {
        var result0;
        
        if (/^[ \t]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        return result0;
      }
      
      function parse_FailMatch() {
        var result0;
        
        if (/^(?!)/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[]");
          }
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      	// initialization block
      	var spanStack = [];
      
      	function tryPushSpanStack(span) {
      		console.log('try push: ' + span);
      		if (spanStack.indexOf(span) !== -1) {
      			console.log('push[no]: ' + span);
      			return false;
      		}
      
      		console.log('push[yes]: ' + span);
      		spanStack.push(span);
      		return true;
      	}
      	function popStack(span) {
      		if (spanStack.length > 0 &&
      			spanStack[spanStack.length - 1] === span) {
      			console.log('pop[yes]: ' + span);
      			spanStack.pop();
      		} else {
      			console.log('pop[no]: ' + span);
      		}
      	}
      	function condenseSpans(spans) {
      		if (spans.length <= 0) {
      			return spans;
      		}
      		var condensed = [];
      		var textSpan = '';
      
      		for (var i = 0; i < spans.length; i++) {
      			if (typeof spans[i] === 'string') {
      				textSpan += spans[i];
      			} else {
      				condensed.push(textSpan);
      				textSpan = '';
      				condensed.push(spans[i]);
      			}
      		}
      		if (textSpan !== '') {
      			condensed.push(textSpan);
      		}
      		return condensed;
      	}
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
